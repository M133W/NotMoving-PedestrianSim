//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/JoystickControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoystickControls"",
    ""maps"": [
        {
            ""name"": ""Passing"",
            ""id"": ""cad707fa-67e1-4387-901a-a21f818a5379"",
            ""actions"": [
                {
                    ""name"": ""passYes"",
                    ""type"": ""Button"",
                    ""id"": ""00214612-f686-4ca6-be1d-bdfed7665428"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""passNo"",
                    ""type"": ""Button"",
                    ""id"": ""0f9e736b-d7d3-477c-b130-a2e4a3537f7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a53bc69b-4a40-485c-be6a-aad70de8f587"",
                    ""path"": ""<HID::Thrustmaster T.16000M>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""passYes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e48f947-d5c1-48eb-8a3d-0e7f7e08a6f6"",
                    ""path"": ""<HID::Thrustmaster T.16000M>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""passNo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Passing
        m_Passing = asset.FindActionMap("Passing", throwIfNotFound: true);
        m_Passing_passYes = m_Passing.FindAction("passYes", throwIfNotFound: true);
        m_Passing_passNo = m_Passing.FindAction("passNo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Passing
    private readonly InputActionMap m_Passing;
    private List<IPassingActions> m_PassingActionsCallbackInterfaces = new List<IPassingActions>();
    private readonly InputAction m_Passing_passYes;
    private readonly InputAction m_Passing_passNo;
    public struct PassingActions
    {
        private @JoystickControls m_Wrapper;
        public PassingActions(@JoystickControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @passYes => m_Wrapper.m_Passing_passYes;
        public InputAction @passNo => m_Wrapper.m_Passing_passNo;
        public InputActionMap Get() { return m_Wrapper.m_Passing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PassingActions set) { return set.Get(); }
        public void AddCallbacks(IPassingActions instance)
        {
            if (instance == null || m_Wrapper.m_PassingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PassingActionsCallbackInterfaces.Add(instance);
            @passYes.started += instance.OnPassYes;
            @passYes.performed += instance.OnPassYes;
            @passYes.canceled += instance.OnPassYes;
            @passNo.started += instance.OnPassNo;
            @passNo.performed += instance.OnPassNo;
            @passNo.canceled += instance.OnPassNo;
        }

        private void UnregisterCallbacks(IPassingActions instance)
        {
            @passYes.started -= instance.OnPassYes;
            @passYes.performed -= instance.OnPassYes;
            @passYes.canceled -= instance.OnPassYes;
            @passNo.started -= instance.OnPassNo;
            @passNo.performed -= instance.OnPassNo;
            @passNo.canceled -= instance.OnPassNo;
        }

        public void RemoveCallbacks(IPassingActions instance)
        {
            if (m_Wrapper.m_PassingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPassingActions instance)
        {
            foreach (var item in m_Wrapper.m_PassingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PassingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PassingActions @Passing => new PassingActions(this);
    public interface IPassingActions
    {
        void OnPassYes(InputAction.CallbackContext context);
        void OnPassNo(InputAction.CallbackContext context);
    }
}
